/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/

// Include configuration for surface post-processing
#includeEtc "caseDicts/postProcessing/surface/surface.cfg"

// Set control parameters for writing output
writeControl    timeStep; //adjustableRunTime; //timeStep // Output is written at adjustable run-time intervals
writeInterval   5; //0.001;              // Interval between outputs
writeFormat     binary;             // Format of the output files

// Define the fields to be output
fields
(
    U Qdot S F tRR SL deltaL T D // List of fields to be output
);

// Configuration for a cut plane surface
cutPlaneSurface
{
    type        cuttingPlane;       // Define type as a cutting plane
    planeType   pointAndNormal;     // Specify the plane by a point and a normal vector
    interpolate false;              // Disable interpolation
}

// List of surfaces to be generated
surfaces
(
    // Inline code stream to generate cut planes dynamically
    #codeStream
    {
        codeInclude #{ #include "vector.H" #};  // Include the vector header
        code
        #{
            // Define a list of coordinates for cut planes
            List<scalar> coords(-5.0e-03 -2.5e-03 +2.5e-03 +5.0e-03);
            forAll(coords, coordI)  // Loop through each coordinate
            {
                const scalar& x = coords[coordI];  // Get the coordinate value
                os << "cutPlane(x," << 1e+3*x << "mm) {"  // Output the cut plane definition
                   << "type        cuttingPlane;"         // Type of cut plane
                   << "planeType   pointAndNormal;"       // Plane specified by point and normal
                   << "interpolate false;"                // Disable interpolation
                   << "point" << vector(x, 0, 0)          // Define point on the plane
                   << "normal" << vector(1, 0, 0)         // Define normal vector of the plane
                   << "}";  // End of cut plane definition
            }
        #};
    }

    // Define specific cut planes
    cutPlane_x { $cutPlaneSurface; point (0 0 0); normal  (1 0 0); }  // Cut plane along x-axis
    cutPlane_y { $cutPlaneSurface; point (0 0 0); normal  (0 1 0); }  // Cut plane along y-axis
    cutPlane_z { $cutPlaneSurface; point (0 0 0); normal  (0 0 1); }  // Cut plane along z-axis
);

// ************************************************************************* //

